/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/tommenx/storage/pkg/apis/storage.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// StorageLableLister helps list StorageLables.
type StorageLableLister interface {
	// List lists all StorageLables in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.StorageLable, err error)
	// StorageLables returns an object that can list and get StorageLables.
	StorageLables(namespace string) StorageLableNamespaceLister
	StorageLableListerExpansion
}

// storageLableLister implements the StorageLableLister interface.
type storageLableLister struct {
	indexer cache.Indexer
}

// NewStorageLableLister returns a new StorageLableLister.
func NewStorageLableLister(indexer cache.Indexer) StorageLableLister {
	return &storageLableLister{indexer: indexer}
}

// List lists all StorageLables in the indexer.
func (s *storageLableLister) List(selector labels.Selector) (ret []*v1alpha1.StorageLable, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageLable))
	})
	return ret, err
}

// StorageLables returns an object that can list and get StorageLables.
func (s *storageLableLister) StorageLables(namespace string) StorageLableNamespaceLister {
	return storageLableNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// StorageLableNamespaceLister helps list and get StorageLables.
type StorageLableNamespaceLister interface {
	// List lists all StorageLables in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.StorageLable, err error)
	// Get retrieves the StorageLable from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.StorageLable, error)
	StorageLableNamespaceListerExpansion
}

// storageLableNamespaceLister implements the StorageLableNamespaceLister
// interface.
type storageLableNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all StorageLables in the indexer for a given namespace.
func (s storageLableNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.StorageLable, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.StorageLable))
	})
	return ret, err
}

// Get retrieves the StorageLable from the indexer for a given namespace and name.
func (s storageLableNamespaceLister) Get(name string) (*v1alpha1.StorageLable, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("storagelable"), name)
	}
	return obj.(*v1alpha1.StorageLable), nil
}
